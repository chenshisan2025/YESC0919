import {
  AppKit
} from "./chunk-XNXXA5FN.js";
import "./chunk-AMZCBQAO.js";
import "./chunk-7HBJIO2E.js";
import "./chunk-TI7FWOOO.js";
import {
  ConstantsUtil,
  EVMWagmiClient,
  defaultConfig
} from "./chunk-V6RB6UTH.js";
import "./chunk-SLPAWLPV.js";
import "./chunk-NPY75PGV.js";
import "./chunk-V3CM6SZ5.js";
import "./chunk-KRAJSJM5.js";
import "./chunk-AT2FS4TW.js";
import "./chunk-2I74Q6BQ.js";
import "./chunk-DUQUDPRB.js";
import "./chunk-JTBZ7SRD.js";
import "./chunk-UQ77WD6W.js";
import "./chunk-X7CH5FWC.js";
import "./chunk-2FW5KNSL.js";
import "./chunk-X334B5A4.js";
import "./chunk-Z6VBAC5W.js";
import "./chunk-INOYHBFT.js";
import "./chunk-MZXFFUKN.js";
import "./chunk-U6O6RVJR.js";
import "./chunk-H5KDOKZC.js";
import "./chunk-25H4HF2P.js";
import "./chunk-LWLUVSGB.js";
import "./chunk-USZMUZ3I.js";
import "./chunk-YSFAWCCI.js";
import "./chunk-JTEZYV4S.js";
import "./chunk-IHF7OJRP.js";
import "./chunk-ZBALP3XM.js";
import "./chunk-LWKGLGX2.js";
import "./chunk-5UBV5ZHI.js";
import {
  require_react
} from "./chunk-VT65UQWK.js";
import {
  __toESM
} from "./chunk-ONY6HBPH.js";

// node_modules/@web3modal/base/dist/esm/utils/library/react/index.js
var import_react = __toESM(require_react());
var modal = void 0;
function getWeb3Modal(appKit) {
  if (appKit) {
    modal = appKit;
  }
}
function useWeb3ModalTheme() {
  if (!modal) {
    throw new Error('Please call "createWeb3Modal" before using "useWeb3ModalTheme" hook');
  }
  function setThemeMode(themeMode2) {
    if (themeMode2) {
      modal == null ? void 0 : modal.setThemeMode(themeMode2);
    }
  }
  function setThemeVariables(themeVariables2) {
    if (themeVariables2) {
      modal == null ? void 0 : modal.setThemeVariables(themeVariables2);
    }
  }
  const [themeMode, setInternalThemeMode] = (0, import_react.useState)(modal.getThemeMode());
  const [themeVariables, setInternalThemeVariables] = (0, import_react.useState)(modal.getThemeVariables());
  (0, import_react.useEffect)(() => {
    const unsubscribe = modal == null ? void 0 : modal.subscribeTheme((state) => {
      setInternalThemeMode(state.themeMode);
      setInternalThemeVariables(state.themeVariables);
    });
    return () => {
      unsubscribe == null ? void 0 : unsubscribe();
    };
  }, []);
  return {
    themeMode,
    themeVariables,
    setThemeMode,
    setThemeVariables
  };
}
function useWeb3Modal() {
  if (!modal) {
    throw new Error('Please call "createWeb3Modal" before using "useWeb3Modal" hook');
  }
  async function open(options) {
    await (modal == null ? void 0 : modal.open(options));
  }
  async function close() {
    await (modal == null ? void 0 : modal.close());
  }
  return { open, close };
}
function useWalletInfo() {
  if (!modal) {
    throw new Error('Please call "createWeb3Modal" before using "useWalletInfo" hook');
  }
  const walletInfo = (0, import_react.useSyncExternalStore)(modal.subscribeWalletInfo, modal.getWalletInfo, modal.getWalletInfo);
  return { walletInfo };
}
function useWeb3ModalState() {
  if (!modal) {
    throw new Error('Please call "createWeb3Modal" before using "useWeb3ModalState" hook');
  }
  const [state, setState] = (0, import_react.useState)(modal.getState());
  (0, import_react.useEffect)(() => {
    const unsubscribe = modal == null ? void 0 : modal.subscribeState((newState) => {
      setState({ ...newState });
    });
    return () => {
      unsubscribe == null ? void 0 : unsubscribe();
    };
  }, []);
  return state;
}
function useWeb3ModalEvents() {
  if (!modal) {
    throw new Error('Please call "createWeb3Modal" before using "useWeb3ModalEvents" hook');
  }
  const [event, setEvents] = (0, import_react.useState)(modal.getEvent());
  (0, import_react.useEffect)(() => {
    const unsubscribe = modal == null ? void 0 : modal.subscribeEvents((newEvent) => {
      setEvents({ ...newEvent });
    });
    return () => {
      unsubscribe == null ? void 0 : unsubscribe();
    };
  }, []);
  return event;
}

// node_modules/@web3modal/wagmi/dist/esm/exports/react/index.js
var appkit = void 0;
var wagmiAdapter = void 0;
function createWeb3Modal(options) {
  wagmiAdapter = new EVMWagmiClient({
    wagmiConfig: options.wagmiConfig,
    siweConfig: options.siweConfig,
    defaultChain: options.defaultChain
  });
  appkit = new AppKit({
    ...options,
    defaultChain: wagmiAdapter.defaultChain,
    adapters: [wagmiAdapter],
    sdkType: "w3m",
    sdkVersion: `react-wagmi-${ConstantsUtil.VERSION}`
  });
  getWeb3Modal(appkit);
  return appkit;
}
export {
  createWeb3Modal,
  defaultConfig as defaultWagmiConfig,
  useWalletInfo,
  useWeb3Modal,
  useWeb3ModalEvents,
  useWeb3ModalState,
  useWeb3ModalTheme
};
//# sourceMappingURL=@web3modal_wagmi_react.js.map
